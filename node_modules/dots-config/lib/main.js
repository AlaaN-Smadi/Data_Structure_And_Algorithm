"use strict";const extend=require("extend"),fileFilter=require("./fileFilter"),fs=require("fs"),{interpolation,RegexEscaped}=require("interpolate-json"),IParser=require("./parsers/IParser"),path=require("path"),type=require("type-detect"),defaultConfigFileName="config",main=()=>{let e={debug:!1,encoding:"utf8",env:"dev",path:null,type:"json"};const t={...e};let r={env:""};const getDefaultPath=(t,n)=>path.resolve(process.cwd(),`${(e=>r.hasOwnProperty(e)?r[e]:"config")(t)}.${(n||e).type}`),log=t=>{e.debug&&console.log(`[dotconfig][debug][${e.env}]: ${t}`)},traceNThrow=t=>{var r;throw r=t,e.debug&&console.trace(`[dotconfig][error][${e.env}]: ${r}`),new Error(t)};let n={};const parse=e=>{let t=null;switch(e.type){case"json":case"env":t=require(`./parsers/parse.${e.type}`);break;default:n.hasOwnProperty(e.type)&&(t=n[e.type])}if(t){"IParser"!==type(t)&&traceNThrow(`parser for type:"${e.type}" should be an IParser implementation.`),e.path=e.path?path.resolve(e.path):getDefaultPath(e.type,e);let r=((e,t)=>{const r=path.basename(e,t);return r===path.basename(e)?"":r})(e.path,`.${e.type}`);log(`Starts parsing "${e.path}" of type:"${e.type}"`);let n=path.dirname(e.path),s=new RegExp(`^${r}(${r?"\\.":""}${e.env})?.${e.type}$`);fs.existsSync(e.path)||(log(`Default config file "${e.path}" does not exists.`),e.path=null);let p=fileFilter(n,s).filter((t=>t!==e.path)),a=t.parse(e.path,e.encoding);return p&&p.length>0&&p.forEach((function(r){log(`taking additional config from "${r}".`),extend(!0,a,t.parse(r,e.encoding))})),a=interpolation.expand(a,process.env),a}traceNThrow(`Parser of type:"${e.type}" is not registered.\nUse config.setParser('<type>', <custom_parser>)`)};return{[Symbol.toStringTag]:"config",loadConfig:function(t){let r={...e},n={};"Object"===type(t)?n=t:(arguments[1]&&"Object"===type(arguments[1])&&(n=arguments[1]),!0===t?n.env=n.env||process.env.NODE_ENV||"dev":"string"===type(t)&&(t.indexOf(".")>-1?n.path=t:n.env=n.env||t)),n.path&&(n.type=n.type||n.path.split(".").pop()),extend(r,n),e.debug=r.debug,e.env=r.env,log(`config.options:\n${JSON.stringify(r,null,2)}`);let s=parse(r);return process.appConfig=s,process.env.appConfig=s,s},setParser:function(t,s,p=null,a=!1){return"string"===type(t)&&"IParser"===type(s)?(n[t]=s,null!==p&&(r[t]=p),!0===a&&(e.type=t,log(`It is now set to load config for type:"${t}" from \n            "${getDefaultPath(t)}" by default`)),log(`registered new parser for type:"${t}"`)):"string"!==type(t)?traceNThrow("customType: should be a string. It generally represents the file extension"):"IParser"!==type(s)?traceNThrow("customParser: should be an IParser implementation."):traceNThrow("Please supply valid arguments"),this},IParser,debug:(t=!0)=>(e.debug=t,this),reset:()=>(e={...t},delete process.appConfig,this),RegexEscaped}};module.exports=main();